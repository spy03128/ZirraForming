spring:
  profiles:
    group:
      development:
        - common
        - development_database
        - port_8081
      production-set1:
        - common
        - production_database
        - port_9001
      production-set2:
        - common
        - production_database
        - port_9002

---
# 스프링 서버 공통 설정
spring:
  profiles:
    active:
      on-profile: common
  # JPA 설정
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true

  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: 676448010615-l92nu3hnd67fhb9l7dovm2euu3c4p9f4.apps.googleusercontent.com
          clientSecret: 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
          scope:
            - email
        facebook:
          clientId: '{페이스북 client-id}'
          clientSecret: '{페이스북 client-secret}'
          scope:
            - email
        naver:
          clientId: 96QOhaKKftnlMuxEBRGT
          clientSecret: YPlSdz6TVv
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - email
          clientName: Naver
        kakao:
          clientId: f5c3e22bfb7f34929bb5b6a4f5d3f318
          clientSecret: Qsmqx8sM5oe1ygclWuNgY8NNv8A5OmX8
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - account_email
          clientName: Kakao
      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

# cors 설정
cors:
  allowed-origins: 'http://j7d107.p.ssafy.io:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://j7d107.p.ssafy.io:3000/oauth/redirect

logging:
  level:
    org:
      springframework:
        security: trace
    com.ssafy.server: debug

file:
  dir: /home/ubuntu/front/build/images
---
# 운영 DB
spring:
  config:
    activate:
      on-profile: production_database
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://j7d107.p.ssafy.io:3306/zirraforming?serverTimezone=Asia/Seoul
    username: ssafy
    password: ssafywlfkvhald
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedsStatements: true

  # Redis 설정
  redis:
    host: j7d107.p.ssafy.io
    port: 6379

  # mongodb 설정
  mongodb:
    host: j7d107.p.ssafy.io
    port: 27017
    database: zirraforming
    username: ssafy
    password: ssafywlfkvhald
    url: mongodb://${spring.mongodb.username}:${spring.mongodb.password}@${spring.mongodb.host}:${spring.mongodb.port}/admin

---
# 개발 DB
spring:
  config:
    activate:
      on-profile: development_database
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://j7d107.p.ssafy.io:3307/zirraforming?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&useLegacyDatetimeCode=false
    username: root
    password: ssafywlfkvhald
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedsStatements: true

  # Redis 설정
  redis:
    host: j7d107.p.ssafy.io
    port: 6380

  # mongodb 설정
  mongodb:
    host: j7d107.p.ssafy.io
    port: 27018
    database: zirraforming
    username: ssafy
    password: ssafywlfkvhald
    url: mongodb://${spring.mongodb.username}:${spring.mongodb.password}@${spring.mongodb.host}:${spring.mongodb.port}/admin

---

spring:
  config:
    activate:
      on-profile: port_8081

server:
  port: 8081

---

spring:
  config:
    activate:
      on-profile: port_9001

server:
  port: 9001

---

spring:
  config:
    activate:
      on-profile: port_9002

server:
  port: 9002
